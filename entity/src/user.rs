//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub username: String,
    pub email: Option<String>,
    pub face_id: Option<String>,
    pub nickname: String,
    pub password_hash: String,
    pub salt: String,
    pub self_info: Option<String>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::application::Entity")]
    Application,
    #[sea_orm(has_many = "super::application_access_grant::Entity")]
    ApplicationAccessGrant,
    #[sea_orm(has_many = "super::application_secret::Entity")]
    ApplicationSecret,
    #[sea_orm(has_many = "super::authorization_code::Entity")]
    AuthorizationCode,
    #[sea_orm(
        belongs_to = "super::image::Entity",
        from = "Column::FaceId",
        to = "super::image::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Image,
    #[sea_orm(has_many = "super::token::Entity")]
    Token,
}

impl Related<super::application::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Application.def()
    }
}

impl Related<super::application_access_grant::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApplicationAccessGrant.def()
    }
}

impl Related<super::application_secret::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApplicationSecret.def()
    }
}

impl Related<super::authorization_code::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthorizationCode.def()
    }
}

impl Related<super::image::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Image.def()
    }
}

impl Related<super::token::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Token.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
